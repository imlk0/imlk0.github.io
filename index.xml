<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on imlk's blog</title><link>https://blog.imlk.top/</link><description>Recent content in Home on imlk's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 17 Mar 2021 13:51:32 +0800</lastBuildDate><atom:link href="https://blog.imlk.top/index.xml" rel="self" type="application/rss+xml"/><item><title>Android11的QPR1安全更新后无法连接北邮校园WiFi的解决方法</title><link>https://blog.imlk.top/posts/connect-to-bput-campus-wifi-on-android-11/</link><pubDate>Wed, 17 Mar 2021 13:51:32 +0800</pubDate><guid>https://blog.imlk.top/posts/connect-to-bput-campus-wifi-on-android-11/</guid><description>Android11在2020年12月发布的安全更新中进行了一个修复：PSA: Android 11 will no longer let you insecurely connect to enterprise WiFi networks 这项变更直接导致的是连接安全性为wpa</description></item><item><title>meowgame2021 writeup</title><link>https://blog.imlk.top/posts/meowgame2021-writeup/</link><pubDate>Tue, 16 Mar 2021 23:20:16 +0800</pubDate><guid>https://blog.imlk.top/posts/meowgame2021-writeup/</guid><description>problem1 题目 https://miaotony.xyz/2021/02/12/CTF_2021HappyChineseNewYear/ 分离文件 下载原图后发现文件头为jpg文件头，jpg文件以FF D8开始以FF D9结束 其中隐藏的第二个文件偏移量为0x10764，我们用</description></item><item><title>吃螃蟹-在Linux上用上AX210NGW网卡</title><link>https://blog.imlk.top/posts/ax210ngw-nic-on-linux-platform/</link><pubDate>Fri, 11 Dec 2020 15:34:07 +0800</pubDate><guid>https://blog.imlk.top/posts/ax210ngw-nic-on-linux-platform/</guid><description>最近把一块1T的垃圾机械硬盘拿去换新了，分区后发现还留有不少的空间，再加上最近有挂byrbt做种的需求，于是乎把它拿来当移动硬盘挂bt啦。无</description></item><item><title>TSCTF 2020 writeup（pwn + misc）</title><link>https://blog.imlk.top/posts/tsctf-2020-writeup-pwn-and-misc/</link><pubDate>Mon, 19 Oct 2020 15:48:21 +0800</pubDate><guid>https://blog.imlk.top/posts/tsctf-2020-writeup-pwn-and-misc/</guid><description>部分题目的binary下载：tsctf-bin.tar.gz easy_adb 这题我们拿到的是一个.pcapng格式的文件，用wireshark可以直接打开</description></item><item><title>用nRF52840 USB Dongle和OpenSK制作开源硬件密钥</title><link>https://blog.imlk.top/posts/opensk-on-nrf52840-usb-dongle/</link><pubDate>Sat, 10 Oct 2020 13:36:28 +0800</pubDate><guid>https://blog.imlk.top/posts/opensk-on-nrf52840-usb-dongle/</guid><description>在大佬的推荐下接触了OpenSK，一个开源的安全密钥实现，支持FIDO U2F标准（双因子认证）和FIDO2规范。目前OpenSK支持的硬件主</description></item><item><title>PXE无盘启动树莓派集群</title><link>https://blog.imlk.top/posts/boot-a-raspberry-pi-cluster-without-disk/</link><pubDate>Sun, 04 Oct 2020 20:24:05 +0800</pubDate><guid>https://blog.imlk.top/posts/boot-a-raspberry-pi-cluster-without-disk/</guid><description>最近从同学那里拿到了几个闲置的树莓派，外加一个路由器和一块2T的硬盘，于是乎想用这些派来搭建一个简单的集群。但是发现SD卡实在是不够，遂尝试</description></item><item><title>newifi 3 路由器刷padavan固件</title><link>https://blog.imlk.top/posts/newifi-3-router-flash-firmware/</link><pubDate>Thu, 12 Mar 2020 17:26:11 +0800</pubDate><guid>https://blog.imlk.top/posts/newifi-3-router-flash-firmware/</guid><description>新路由器到了两星期了，期间总是出现突然wan网络不通的情况，而且信号也没有上一台强（严重影响蹲坑时玩手机的体验）。参考网友们的建议，准备给n</description></item><item><title>在AVD_7.1_x86 emulator上安装微信</title><link>https://blog.imlk.top/posts/wechat-in-avd-7-1-x86/</link><pubDate>Thu, 13 Jun 2019 16:35:07 +0800</pubDate><guid>https://blog.imlk.top/posts/wechat-in-avd-7-1-x86/</guid><description>起因 好久没有写博客了，并不是其中没有折腾2333，作业太多好多事情都没写（其实就是懒） 那啥，手头有两台手机，一台太烂但是7.1.1 root过</description></item><item><title>自制x86玩具操作系统 week10</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week10/</link><pubDate>Wed, 01 May 2019 00:00:09 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week10/</guid><description>DAY 0x1B 回顾TSS结构体，其中有一CR3字段，该字段在task切换的时候会自动赋值给CR3寄存器，我们可以在这里给用户程序设置额外的页目录地址（</description></item><item><title>自制x86玩具操作系统 week9</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week9/</link><pubDate>Wed, 01 May 2019 00:00:08 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week9/</guid><description>DAY 0x18 分页前的准备 Linux并没有非常依赖于段表，而是采用的分页结构，将内核和用户程序的段设置为覆盖整个内存区域以此来绕过分段结构，但是显然这</description></item><item><title>自制x86玩具操作系统 week8</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week8/</link><pubDate>Wed, 01 May 2019 00:00:07 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week8/</guid><description>DAY 0x17 关于链接器obj2bim 翻看源码发现，obj2bim其实就是个链接器，依据一个.rul规则文件来生成链接后的二进制文件。 输入文件 它接受的</description></item><item><title>自制x86玩具操作系统 week7</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week7/</link><pubDate>Wed, 01 May 2019 00:00:06 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week7/</guid><description>DAY 0x12 让新进程执行对象的成员函数 今天回看之前的内容，发现命令行窗口那一块比较乱，于是乎建了一个Console类，把和控制台有关的比如图层、Fi</description></item><item><title>自制x86玩具操作系统 week6</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week6/</link><pubDate>Wed, 01 May 2019 00:00:05 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week6/</guid><description>DAY 0x0F 两种JMP指令 near jmp只修改IP寄存器的值，而far jmp同时修改IP寄存器和CS寄存器的值(用:隔开) 用于任务切换的JMP命令就属于f</description></item><item><title>自制x86玩具操作系统 week5</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week5/</link><pubDate>Wed, 01 May 2019 00:00:04 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week5/</guid><description>DAY 0x0C PIT (Programmable Interval Timer 可编程的间隔型定时器) 查阅资料知道AT兼容机中PIT时钟频率为1.19318MHz 中断周期设定的值的单位是一个时钟周期，因此要达</description></item><item><title>自制x86玩具操作系统 week4</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week4/</link><pubDate>Wed, 01 May 2019 00:00:03 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week4/</guid><description>DAY 0x09 内存检查 内存检查前需要先禁用缓存，通过修改CR0寄存器实现这一点 内存检查是通过对内存单元进行写、反转、判断、反转、判断，来确定一个内存单</description></item><item><title>自制x86玩具操作系统 week3</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week3/</link><pubDate>Wed, 01 May 2019 00:00:02 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week3/</guid><description>DAY 0x06 Makefile make中可以使用一般规则（通配规则,依赖中:%.cpp,执行语句中:$*.cpp），但是普通规则比一般规则的优先级更高 汇编 GDTR寄</description></item><item><title>自制x86玩具操作系统 week2</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week2/</link><pubDate>Wed, 01 May 2019 00:00:01 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week2/</guid><description>DAY 0x03 Makefile 命令块中-del + 文件表示让make中删除该文件 汇编 INT 0x13中断表示操作磁盘 参数 取值和含义 AH 0x00复位磁盘,0x02读盘,0x3写</description></item><item><title>自制x86玩具操作系统 week1</title><link>https://blog.imlk.top/posts/x86-toyos-dev-week1/</link><pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate><guid>https://blog.imlk.top/posts/x86-toyos-dev-week1/</guid><description>DAY 0x00 先装个翻译插件，装了半天找了个勉强能用的 然后考虑用git来做版本控制，方便和原版进行比较找出自己的修改，然后发现文字编码问题，于是乎捣鼓</description></item><item><title>Codeforces contest 1082 E. Increasing Frequency</title><link>https://blog.imlk.top/posts/codeforces-contest-1082-e-increasing-frequency/</link><pubDate>Fri, 30 Nov 2018 00:06:03 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-contest-1082-e-increasing-frequency/</guid><description>原题在这 这题搞了好久，大意是讲给一个长为n的数串，让其中某一个子区间的数都+k，然后使得整个串里等于c的数个数尽可能大，问最大多少 串里的数范</description></item><item><title>Android Studio免DDMS免configure快速调试Smali代码</title><link>https://blog.imlk.top/posts/android-studio-fast-debugging-smali-without-ddms/</link><pubDate>Thu, 19 Jul 2018 01:11:30 +0800</pubDate><guid>https://blog.imlk.top/posts/android-studio-fast-debugging-smali-without-ddms/</guid><description>起因 Android Studio是开发Android应用的一大利器，极大的提高了生产力（虽然比较臃肿），debug功能也非常好用，而且不止能debug Ja</description></item><item><title>Codeforces Contest 1009 E. Intercity Travelling</title><link>https://blog.imlk.top/posts/codeforces-contest-1009-e/</link><pubDate>Sun, 15 Jul 2018 21:06:24 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-contest-1009-e/</guid><description>链接 Educational Codeforces Round 47 (Rated for Div. 2) - E. Intercity Travelling http://codeforces.com/contest/1009/problem/E 思路 n千米，有n段路，共有n-1个可能可以休息的地方，则共有2^(n-1)种可能的休息方式; 要计算 p⋅2^(n</description></item><item><title>[hihoCoder]1777 彩球</title><link>https://blog.imlk.top/posts/hihocoder-1777-colorful-balls/</link><pubDate>Fri, 13 Jul 2018 16:28:27 +0800</pubDate><guid>https://blog.imlk.top/posts/hihocoder-1777-colorful-balls/</guid><description>原题 https://hihocoder.com/problemset/problem/1777 输入 第一行三个正整数 n, k, P 对于50%的数据，有1 ≤ n, k, P ≤ 10^9 对于100%的数据，有1 ≤ n, k, P ≤ 10^18 解法 考察大数的幂次取模 乘法溢出 用快速幂</description></item><item><title>POJ 1061 青蛙的约会</title><link>https://blog.imlk.top/posts/poj-1061-frogs-date/</link><pubDate>Fri, 13 Jul 2018 16:08:54 +0800</pubDate><guid>https://blog.imlk.top/posts/poj-1061-frogs-date/</guid><description>原题 http://poj.org/problem?id=1061 解法 此题用扩展欧几里得计算 (n-m) * X ≡ (x-y) (mod l) 的最小正整数解 即(n-m) * X + l * Y = (x-y) 贝祖定理： ax + by = m 有整数解时当且仅当m是gcd(a</description></item><item><title>POJ 1150 The Last Non-zero Digit</title><link>https://blog.imlk.top/posts/poj-1150-the-last-nonzero-digit/</link><pubDate>Fri, 13 Jul 2018 16:02:29 +0800</pubDate><guid>https://blog.imlk.top/posts/poj-1150-the-last-nonzero-digit/</guid><description>原题 http://poj.org/problem?id=1150 参考 https://blog.csdn.net/txl199106/article/details/40653579 #include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cmath&amp;gt; #define LL long long using namespace std; // 除了统计2，5的总因子数，还统计末尾位为3，7，9的数目 void count(LL co[], int n) { if (n == 0) { return; } for (int m = n; m &amp;gt; 0;</description></item><item><title>Codeforces Contest 1005 E2. Median on Segments (General Case Edition)</title><link>https://blog.imlk.top/posts/codeforces-contest-1005-e2/</link><pubDate>Wed, 11 Jul 2018 16:58:32 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-contest-1005-e2/</guid><description>链接 Codeforces Round #496 (Div. 3) - E2. Median on Segments (General Case Edition) 0x00问题转化 为求得中位数为m的所有区间组合，可以将问题转化为两个更容易的问题 “求&amp;lt;中位数为大于等于m</description></item><item><title>Xposed框架加持下的Android应用中ClassLoader的结构关系</title><link>https://blog.imlk.top/posts/classloader-in-android-with-xposed-installed/</link><pubDate>Sat, 07 Jul 2018 21:52:37 +0800</pubDate><guid>https://blog.imlk.top/posts/classloader-in-android-with-xposed-installed/</guid><description>好久没写东西了，期末终于考完了，想起之前对Xposed开发的一些问题还没有解决，于是搬出来探索了一番。 Android应用ClassLoade</description></item><item><title>为ZjDroid适配ART虚拟机的尝试</title><link>https://blog.imlk.top/posts/port-zjdroid-to-art/</link><pubDate>Sat, 05 May 2018 22:09:54 +0800</pubDate><guid>https://blog.imlk.top/posts/port-zjdroid-to-art/</guid><description>上星期趁着放假玩了玩ZjDroid，自己编译了一个来玩，最终克服万难总算找齐了源码，给编译出来了。 上一篇文章: 笔记-第一次ZjDroid脱壳</description></item><item><title>为Xposed模块增加Multidex支持并指定主dex中的class</title><link>https://blog.imlk.top/posts/android-multidex-how-to/</link><pubDate>Sun, 29 Apr 2018 11:19:47 +0800</pubDate><guid>https://blog.imlk.top/posts/android-multidex-how-to/</guid><description>起因 在编译ZjDroid源码的时候遇到了著名的方法数超出65536个的问题。 我的gradle版本 classpath 'com.android.tools.build:gradle:3.1.2' 要解决的问题 Xposed模块中的方法数超</description></item><item><title>记一次ZjDroid脱壳实战</title><link>https://blog.imlk.top/posts/unpacking-apk-with-zjdroid-in-action/</link><pubDate>Sat, 28 Apr 2018 00:05:10 +0800</pubDate><guid>https://blog.imlk.top/posts/unpacking-apk-with-zjdroid-in-action/</guid><description>看了那么多逆向破解的文章，总得来点实战的了，正所谓实践出真知嘛。 拜读了姜维大神的「Android中Xposed框架篇&amp;mdash;基于Xpo</description></item><item><title>为hexo开发一个简单的模块mdjsp</title><link>https://blog.imlk.top/posts/a-simple-hexo-module-mdjsp-development/</link><pubDate>Thu, 26 Apr 2018 22:48:26 +0800</pubDate><guid>https://blog.imlk.top/posts/a-simple-hexo-module-mdjsp-development/</guid><description>第一次写npm插件，有点小激动，下面是写插件的坎坷之路 0x00 开局错误 在node_modules文件夹下新建hexo-mdjsp-util文件夹，</description></item><item><title>一些关于数据结构的文章集合</title><link>https://blog.imlk.top/posts/data-structures-article-collection/</link><pubDate>Thu, 19 Apr 2018 19:22:18 +0800</pubDate><guid>https://blog.imlk.top/posts/data-structures-article-collection/</guid><description>串 模式匹配 从头到尾彻底理解KMP： https://www.cnblogs.com/zhangtianq/p/5839909.html 树 二叉树 搜索二叉树的旋转操作和平衡判断： https://www.cnblogs.com/zhanghaiba/p/3537221.html 数据结构—平衡二叉树，树的平衡旋转： https://www.cnblogs.com/PerkinsZhu/p/5824015.html</description></item><item><title>JavaScript入门啦</title><link>https://blog.imlk.top/posts/notes-getting-started-with-javascript/</link><pubDate>Tue, 17 Apr 2018 21:19:19 +0800</pubDate><guid>https://blog.imlk.top/posts/notes-getting-started-with-javascript/</guid><description>参考资料： ECMAScript 6 入门: http://es6.ruanyifeng.com/ 以下所有代码示例均为在nodejs交互模式下进行的，环境：Linux JavaScript不区分整数和浮点数，统一用Nu</description></item><item><title>读Android系统篇之----免root实现Hook系统服务拦截方法</title><link>https://blog.imlk.top/posts/notes-reading-no-root-to-hook-system-service-in-android/</link><pubDate>Fri, 13 Apr 2018 15:00:21 +0800</pubDate><guid>https://blog.imlk.top/posts/notes-reading-no-root-to-hook-system-service-in-android/</guid><description>第二篇读书笔记 拜读姜维大神的Android系统篇之&amp;mdash;-免root实现Hook系统服务拦截方法 梳理了下思路，解决了疑惑 我们使用剪切</description></item><item><title>理解Android中Service的Binder跨进程通信机制</title><link>https://blog.imlk.top/posts/notes-of-ipc-with-binder-in-android/</link><pubDate>Wed, 11 Apr 2018 22:38:50 +0800</pubDate><guid>https://blog.imlk.top/posts/notes-of-ipc-with-binder-in-android/</guid><description>今天拜读了姜维大神的Android系统篇之----Binder机制和远程服务调用机制分析 Android系统篇之&amp;mdash;-Binder机</description></item><item><title>HDU 1711 Number Sequence ——KMP</title><link>https://blog.imlk.top/posts/hdu-1711-number-sequence-kmp/</link><pubDate>Wed, 14 Mar 2018 16:00:31 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-1711-number-sequence-kmp/</guid><description>http://acm.hdu.edu.cn/showproblem.php?pid=1711 ##Problem Description Given two sequences of numbers : a[1], a[2], &amp;hellip;&amp;hellip; , a[N], and b[1], b[2], &amp;hellip;&amp;hellip; , b[M] (1 &amp;lt;= M &amp;lt;= 10000, 1 &amp;lt;= N &amp;lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], &amp;hellip;&amp;hellip; , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest one. Input</description></item><item><title>HDU 2586 How far away ？</title><link>https://blog.imlk.top/posts/hdu-2586-how-far-away/</link><pubDate>Fri, 02 Mar 2018 15:58:51 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-2586-how-far-away/</guid><description>HDU 2586 How far away ？——树上节点最短距离，LCA， 双亲表示法+暴力从下至上追溯，孩子链表示法+（Tarjan 或 欧拉环游RMQ+（ST 或 Segment</description></item><item><title>CodeForces 891 A. Pride</title><link>https://blog.imlk.top/posts/codeforces-891-a-pride/</link><pubDate>Tue, 27 Feb 2018 10:30:47 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-891-a-pride/</guid><description>http://codeforces.com/problemset/problem/891/A #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cmath&amp;gt; using namespace std; long long dp[2005][2005]; // dp[x][y]表示gcd(x...(x + y)) /* x是起始点位置,y是距离 a1, a2, a3, a4, a5, a6, a7, a8 ↑ ← y → ↑ x x + y */ //</description></item><item><title>HDU 1080 POJ 1080 Human Gene Functions——动态规划</title><link>https://blog.imlk.top/posts/hdu-1080-poj-1080-human-gene-functions-dp/</link><pubDate>Mon, 26 Feb 2018 21:53:24 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-1080-poj-1080-human-gene-functions-dp/</guid><description>http://poj.org/problem?id=1080 http://acm.hdu.edu.cn/showproblem.php?pid=1080 #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;cstring&amp;gt; #define MAX(x,y,z) ((x)&amp;gt;(y)?((x)&amp;gt;(z)?(x):(z)):((y)&amp;gt;(z)?(y):(z))) using namespace std; char str1[105]; char str2[105]; int list[6][6] = { // { \0, A, C, G, T, -} /*\0*/ { 0, 0, 0, 0, 0, 0}, /*A*/ { 0, 5, -1, -2, -1, -3}, /*C*/ { 0, -1, 5, -3, -2, -4}, /*G*/ { 0, -2, -3, 5, -2, -2}, /*T*/ { 0, -1, -2, -2,</description></item><item><title>Fragment != Fragment ? —— Xposed开发中多ClassLoader的问题</title><link>https://blog.imlk.top/posts/fragment-ne-fragment-xposed-problems-with-classloader/</link><pubDate>Sun, 25 Feb 2018 18:02:56 +0800</pubDate><guid>https://blog.imlk.top/posts/fragment-ne-fragment-xposed-problems-with-classloader/</guid><description>今天在写Xposed模块的过程中，为了找到某个Field，需要判断Filed的某个祖先的类型是是Fragment类型 但在做比较的时候出现了问</description></item><item><title>HDU 1325 1272 并查集判断有向图和无向图是否构成一棵树型</title><link>https://blog.imlk.top/posts/hdu-1325-1272-concurrent-set-checking-is-tree/</link><pubDate>Fri, 09 Feb 2018 16:49:34 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-1325-1272-concurrent-set-checking-is-tree/</guid><description>HDU 1325 HDU 1272 HDU 1325是有向图，给定某个节点是另一个元素的父节点 HDU 1272是无向图，将两个节点连接起来 共同点：判断是否成环，判断是树木还是森林 区</description></item><item><title>CodeForces 699D Fix a Tree</title><link>https://blog.imlk.top/posts/codeforces-699d-fix-a-tree/</link><pubDate>Thu, 08 Feb 2018 18:24:54 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-699d-fix-a-tree/</guid><description>并查集优化 给出所有节点的父节点（有向图），用最少的修改生成一颗合法的树（环的判断，去环） D. Fix a Tree time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output A tree is an</description></item><item><title>CodeForces 699C Vacations——动态规划</title><link>https://blog.imlk.top/posts/codeforces-699c-vacations-dp/</link><pubDate>Thu, 08 Feb 2018 11:49:53 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-699c-vacations-dp/</guid><description>原题链接 C. Vacations time limit per test 1 second memory limit per test 256 megabytes input standard input output standard output Vasya has n days of vacations! So he decided to improve his IT skills and do sport. Vasya knows the following information about each of this n days: whether that gym opened and whether a contest was carried out in the Internet on that day. For</description></item><item><title>HYSBZ 1216: [HNOI2003]操作系统</title><link>https://blog.imlk.top/posts/hysbz-1216-hnoi2003-operating-system/</link><pubDate>Wed, 07 Feb 2018 23:27:09 +0800</pubDate><guid>https://blog.imlk.top/posts/hysbz-1216-hnoi2003-operating-system/</guid><description>题目链接 1216: [HNOI2003]操作系统 Time Limit: 10 Sec Memory Limit: 162 MB Submit: 1045 Solved: 565 [Submit][Status][Discuss] Description 写一个程序来模拟操作系统的进程调度。假设该系统只有一个CPU，每一个进程的</description></item><item><title>最长递增子列问题的另一种思路——转化为LCS问题</title><link>https://blog.imlk.top/posts/slove-the-longest-incremental-subcolumn-by-lcs/</link><pubDate>Tue, 06 Feb 2018 21:11:32 +0800</pubDate><guid>https://blog.imlk.top/posts/slove-the-longest-incremental-subcolumn-by-lcs/</guid><description>利用LCS的解题思路可以解决最长递增子列的问题顺便求出该递增序列 例如 list1 = [1, 2, 3, 1, -1, 0, 4, 5] 将其排序得 list2 = [-1, 0, 1, 1, 2, 3, 4, 5] 则问题转化为 求list</description></item><item><title>HDU 1166 敌兵布阵——线段树，树状数组</title><link>https://blog.imlk.top/posts/hdu-1166-enemy-arrays-line-trees-tree-arrays/</link><pubDate>Tue, 06 Feb 2018 17:33:38 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-1166-enemy-arrays-line-trees-tree-arrays/</guid><description>这题本来我打算用前缀数组实现源数据的处理，并把更变用map&amp;lt;int ,int&amp;gt;实现，发现后来还是超时了； 借机学习了一下线段树，虽然</description></item><item><title>一些算法词汇缩写</title><link>https://blog.imlk.top/posts/some-algorithm-vocabulary/</link><pubDate>Fri, 02 Feb 2018 23:41:28 +0800</pubDate><guid>https://blog.imlk.top/posts/some-algorithm-vocabulary/</guid><description>https://segmentfault.com/a/1190000002641054 LCS Longest Common Subsequence 最长公共子列 LIS Longest Increasing Subsequence 最长上升子列 https://segmentfault.com/a/1190000002646526 LRS Longest Repeated Substring 重复子串 https://www.cnblogs.com/JVxie/p/4854719.html LCA Least Common Ancestors 最近的公共祖先 http://blog.csdn.net/ywcpig/article/details/52336496 RMQ Range Maximum/Minimm Query 区间最值查询</description></item><item><title>CodeForces 697D 树+概率</title><link>https://blog.imlk.top/posts/codeforces-697d-tree-and-probability/</link><pubDate>Thu, 01 Feb 2018 23:34:57 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-697d-tree-and-probability/</guid><description>原题链接 D. Puzzles time limit per test 1 second memory limit per test 256 megabytes input standard input output standard output Barney lives in country USC (United States of Charzeh). USC has n cities numbered from 1 through n and n - 1 roads between them. Cities and roads of USC form a rooted tree (Barney's not sure why it is rooted). Root of the tree is</description></item><item><title>HDU 2577 How To Type 动态规划</title><link>https://blog.imlk.top/posts/hdu-2577-how-to-type-dynamic-programming/</link><pubDate>Thu, 01 Feb 2018 17:59:56 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-2577-how-to-type-dynamic-programming/</guid><description>How to Type Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) Total Submission(s): 7448 Accepted Submission(s): 3374 Problem Description Pirates have finished developing the typing software. He called Cathy to test his typing software. She is good at thinking. After testing for several days, she finds that if she types a string by some ways, she will type the key at least. But she has a bad habit</description></item><item><title>两大LCS问题</title><link>https://blog.imlk.top/posts/two-major-lcs-problems/</link><pubDate>Thu, 01 Feb 2018 12:09:09 +0800</pubDate><guid>https://blog.imlk.top/posts/two-major-lcs-problems/</guid><description>0x00 相同子序：（不要求连续） #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstdio&amp;gt; // // #define DEBUG // #ifdef DEBUG // #define SHOW // #else // #define SHOW /##/ // #endif // 不可行，注释先于预处理指令被处理 using namespace std; // LCS共同子序不要求</description></item><item><title>HDU 2089的类似题（62换成了38） 数位dp解释</title><link>https://blog.imlk.top/posts/hdu-2089-another-a-question-similar-to/</link><pubDate>Sun, 28 Jan 2018 23:41:21 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-2089-another-a-question-similar-to/</guid><description>链接 来源：牛客网 杭州人称傻乎乎的人为62，而嘟嘟家这里没有这样的习俗。 相比62，他那里的人更加讨厌数字38，当然啦，还有4这个 数字！所以啊，</description></item><item><title>Java中继承的覆盖与隐藏</title><link>https://blog.imlk.top/posts/java-inheritance-overrides-and-hiding/</link><pubDate>Sun, 21 Jan 2018 22:39:20 +0800</pubDate><guid>https://blog.imlk.top/posts/java-inheritance-overrides-and-hiding/</guid><description>参考： https://www.cnblogs.com/it12345/p/5221673.html 隐藏和覆盖的区别 隐藏：将类型转换为父类的类型 即可解除 隐藏 覆盖：将类型转换为父类的类型也 不能 解除覆盖 成员变量 只可能被隐藏，不存在覆盖一</description></item><item><title>重拾Python之旅</title><link>https://blog.imlk.top/posts/returning-to-the-python-journey/</link><pubDate>Sun, 21 Jan 2018 00:11:50 +0800</pubDate><guid>https://blog.imlk.top/posts/returning-to-the-python-journey/</guid><description>#!/usr/bin/env python #coding:utf-8 # http://www.he11oworld.com/course/54 # linux上必须写 #!/usr/bin/env python 它能够引导程序找到python的解析器，也就是说，不管你这个文件保存在什么地方，这个程序都能执行，而不用制</description></item><item><title>在C++构造函数中转而调用其它构造函数的三种方法</title><link>https://blog.imlk.top/posts/c++-three-ways-to-to-call-other-constructors-in-constructor/</link><pubDate>Fri, 19 Jan 2018 21:41:51 +0800</pubDate><guid>https://blog.imlk.top/posts/c++-three-ways-to-to-call-other-constructors-in-constructor/</guid><description>C++构造函数中转而调用其它构造函数的三种方法 0x00 在初始化列表中调调用另一个构造函数 /** * warning: delegating constructors only available with -std=c++11 or -std=gnu++11 */ Teacher::Teacher(): Teacher(&amp;quot;unknown&amp;quot;,30) {} 0x01 使用this指针显式调用构</description></item><item><title>Codeforces 429B B.Working out</title><link>https://blog.imlk.top/posts/codeforces-429b-b-working-out/</link><pubDate>Tue, 09 Jan 2018 20:47:19 +0800</pubDate><guid>https://blog.imlk.top/posts/codeforces-429b-b-working-out/</guid><description>http://codeforces.com/problemset/problem/429/B 对于题中刁钻的要求，仔细分析所给条件的等价条件，有时候，所给条件符合的情形只有很少的几种。 http://blog.csdn.net/cc_again/article/details/25691925 题目意思： 给n*m的矩阵，每个格子有个数，A从</description></item><item><title>一些算法文章集合</title><link>https://blog.imlk.top/posts/algorithm-article-collection/</link><pubDate>Sat, 06 Jan 2018 16:44:51 +0800</pubDate><guid>https://blog.imlk.top/posts/algorithm-article-collection/</guid><description>0x00 OJ网站 projecteuler https://projecteuler.net/archives 0x01 算法集合 http://blog.51cto.com/ahalei/p2 0x02 动态规划 题集 http://blog.csdn.net/eagle_or_snail/article/details/50987044 最长公共子序列（LCS）问题 http://blog.csdn.net/lisonglisonglisong/article/details/4154855 http://blog.csdn.net/lisonglisonglisong/article/details/41596309 最长递增子序列 http://blog.csdn.net/u013074465/article/details/45442067 0x03 图算法 图算法之最短路径（Dijkstra） https://www.cnblogs.com/nigang/p/3658990.html</description></item><item><title>Xposed模块开发——在hook之后使用module的drawable资源</title><link>https://blog.imlk.top/posts/xposed-using-drawable-resource/</link><pubDate>Sat, 30 Dec 2017 16:52:36 +0800</pubDate><guid>https://blog.imlk.top/posts/xposed-using-drawable-resource/</guid><description>在xposed开发过程中遇到了直接使用模块内置资源失效的问题，而且这个问题很诡异，有时候失效，有时候有效果，没效果的时候一般是显示一把叉叉 在</description></item><item><title>printf格式化输出浮点数动态指定长度</title><link>https://blog.imlk.top/posts/c-printf-formatting-dynamic-length/</link><pubDate>Sat, 16 Dec 2017 23:55:10 +0800</pubDate><guid>https://blog.imlk.top/posts/c-printf-formatting-dynamic-length/</guid><description>printf要格式化输出动态长度的数，有两种方法： 0x00 构造一个字符数组，先根据要动态的长度构造出对应的格式化字符串，然后传入printf的第一</description></item><item><title>关于Java中Thread类的一些误区</title><link>https://blog.imlk.top/posts/some-misconceptions-about-java-thread/</link><pubDate>Sat, 09 Dec 2017 16:56:54 +0800</pubDate><guid>https://blog.imlk.top/posts/some-misconceptions-about-java-thread/</guid><description>Thread interrupt() 1.这个方法只会给线程设置一个为true的中断标志。 2.该方法可在需要中断的线程内自己调用，也可在其他线程中调用需要中断的线程对象的这个</description></item><item><title>用位运算来模拟数组实现一道算法题</title><link>https://blog.imlk.top/posts/an-algorithm-problem-need-no-arrays/</link><pubDate>Sat, 09 Dec 2017 12:26:58 +0800</pubDate><guid>https://blog.imlk.top/posts/an-algorithm-problem-need-no-arrays/</guid><description>输入一串字符串'\n&amp;rsquo;结尾，X代表小偷，#代表普通人，数字代表警察，其数字是警察能巡视到的范围。 输出小偷个数，换行。 #include &amp;lt;stdio.h&amp;gt; int printBin(unsigned long num){</description></item><item><title>HDU 1003 Max sum——分治法的应用，动态规划，前缀数组</title><link>https://blog.imlk.top/posts/hdu-1003-max-sum/</link><pubDate>Wed, 06 Dec 2017 23:10:33 +0800</pubDate><guid>https://blog.imlk.top/posts/hdu-1003-max-sum/</guid><description>原题： http://acm.hdu.edu.cn/showproblem.php?pid=1003 看到这题的时候一脸懵逼，网上寻找解答，发现都讲的不详细，变量声明也很短，根本看不出是什么用途，这里给出了我的解答，参考了网上各位大神</description></item><item><title>遇到scanf的一个小误区</title><link>https://blog.imlk.top/posts/myths-about-scanf/</link><pubDate>Wed, 06 Dec 2017 18:43:21 +0800</pubDate><guid>https://blog.imlk.top/posts/myths-about-scanf/</guid><description>#include &amp;lt;stdio.h&amp;gt; int main(){ int a, b; while(scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;a,&amp;amp;b) == EOF){ printf(&amp;quot;%d\n&amp;quot;, a + b); } return 0; } scanf() 遇到文件末尾时，如果什么都没有读取到，就返回EOF(-1)， 如果有变量已经赋值那就返回赋值了的变量个数</description></item><item><title>Java和C++中方法Override后外部调用父类方法时的区别</title><link>https://blog.imlk.top/posts/methods-overriding-in-java-and-c++/</link><pubDate>Tue, 21 Nov 2017 17:30:03 +0800</pubDate><guid>https://blog.imlk.top/posts/methods-overriding-in-java-and-c++/</guid><description>以Java语法示范： 面向对象中，B extends A // Java中 B objectB = new B(); objectB.foo();//输出 from Child Class A objectA = new B(); objectA.foo();</description></item><item><title>About me</title><link>https://blog.imlk.top/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.imlk.top/about/</guid><description># echo &amp;quot;${self}&amp;quot; BUPT本科生毕业了、酷安应用开发者（做Android的，曾经）、写后端的（曾经）、Xposed爱好者（写模块的）、FydeOS former in</description></item><item><title>Archives</title><link>https://blog.imlk.top/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.imlk.top/archives/</guid><description>目录 标签</description></item><item><title>imlk和他的好朋友们</title><link>https://blog.imlk.top/friends/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.imlk.top/friends/</guid><description>欢迎联系窝 交换友链呀\(^o^)/~ w568w http://w568w.ml/ HeYan的Bug杂货店 http://heyanle.com/ 神楽坂花火 https://blog.yaerin.com/ 这是个小博客 http://fols.top/ 听涛 https://zhuct.top/ Ali的博客 https://ilii.me/ 灰灰のblog https://blog.xhhold.com/ 王珗珄 http://shwang.xyz/ Nihileon https://nihil.top/</description></item></channel></rss>
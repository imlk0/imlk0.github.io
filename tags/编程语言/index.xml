<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程语言 on imlk's blog</title><link>https://blog.imlk.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><description>Recent content in 编程语言 on imlk's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 17 Apr 2018 21:19:19 +0800</lastBuildDate><atom:link href="https://blog.imlk.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript入门啦</title><link>https://blog.imlk.top/posts/notes-getting-started-with-javascript/</link><pubDate>Tue, 17 Apr 2018 21:19:19 +0800</pubDate><guid>https://blog.imlk.top/posts/notes-getting-started-with-javascript/</guid><description>参考资料： ECMAScript 6 入门: http://es6.ruanyifeng.com/ 以下所有代码示例均为在nodejs交互模式下进行的，环境：Linux JavaScript不区分整数和浮点数，统一用Nu</description></item><item><title>Java中继承的覆盖与隐藏</title><link>https://blog.imlk.top/posts/java-inheritance-overrides-and-hiding/</link><pubDate>Sun, 21 Jan 2018 22:39:20 +0800</pubDate><guid>https://blog.imlk.top/posts/java-inheritance-overrides-and-hiding/</guid><description>参考： https://www.cnblogs.com/it12345/p/5221673.html 隐藏和覆盖的区别 隐藏：将类型转换为父类的类型 即可解除 隐藏 覆盖：将类型转换为父类的类型也 不能 解除覆盖 成员变量 只可能被隐藏，不存在覆盖一</description></item><item><title>重拾Python之旅</title><link>https://blog.imlk.top/posts/returning-to-the-python-journey/</link><pubDate>Sun, 21 Jan 2018 00:11:50 +0800</pubDate><guid>https://blog.imlk.top/posts/returning-to-the-python-journey/</guid><description>#!/usr/bin/env python #coding:utf-8 # http://www.he11oworld.com/course/54 # linux上必须写 #!/usr/bin/env python 它能够引导程序找到python的解析器，也就是说，不管你这个文件保存在什么地方，这个程序都能执行，而不用制</description></item><item><title>在C++构造函数中转而调用其它构造函数的三种方法</title><link>https://blog.imlk.top/posts/c++-three-ways-to-to-call-other-constructors-in-constructor/</link><pubDate>Fri, 19 Jan 2018 21:41:51 +0800</pubDate><guid>https://blog.imlk.top/posts/c++-three-ways-to-to-call-other-constructors-in-constructor/</guid><description>C++构造函数中转而调用其它构造函数的三种方法 0x00 在初始化列表中调调用另一个构造函数 /** * warning: delegating constructors only available with -std=c++11 or -std=gnu++11 */ Teacher::Teacher(): Teacher(&amp;quot;unknown&amp;quot;,30) {} 0x01 使用this指针显式调用构</description></item><item><title>printf格式化输出浮点数动态指定长度</title><link>https://blog.imlk.top/posts/c-printf-formatting-dynamic-length/</link><pubDate>Sat, 16 Dec 2017 23:55:10 +0800</pubDate><guid>https://blog.imlk.top/posts/c-printf-formatting-dynamic-length/</guid><description>printf要格式化输出动态长度的数，有两种方法： 0x00 构造一个字符数组，先根据要动态的长度构造出对应的格式化字符串，然后传入printf的第一</description></item><item><title>关于Java中Thread类的一些误区</title><link>https://blog.imlk.top/posts/some-misconceptions-about-java-thread/</link><pubDate>Sat, 09 Dec 2017 16:56:54 +0800</pubDate><guid>https://blog.imlk.top/posts/some-misconceptions-about-java-thread/</guid><description>Thread interrupt() 1.这个方法只会给线程设置一个为true的中断标志。 2.该方法可在需要中断的线程内自己调用，也可在其他线程中调用需要中断的线程对象的这个</description></item><item><title>遇到scanf的一个小误区</title><link>https://blog.imlk.top/posts/myths-about-scanf/</link><pubDate>Wed, 06 Dec 2017 18:43:21 +0800</pubDate><guid>https://blog.imlk.top/posts/myths-about-scanf/</guid><description>#include &amp;lt;stdio.h&amp;gt; int main(){ int a, b; while(scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;a,&amp;amp;b) == EOF){ printf(&amp;quot;%d\n&amp;quot;, a + b); } return 0; } scanf() 遇到文件末尾时，如果什么都没有读取到，就返回EOF(-1)， 如果有变量已经赋值那就返回赋值了的变量个数</description></item><item><title>Java和C++中方法Override后外部调用父类方法时的区别</title><link>https://blog.imlk.top/posts/methods-overriding-in-java-and-c++/</link><pubDate>Tue, 21 Nov 2017 17:30:03 +0800</pubDate><guid>https://blog.imlk.top/posts/methods-overriding-in-java-and-c++/</guid><description>以Java语法示范： 面向对象中，B extends A // Java中 B objectB = new B(); objectB.foo();//输出 from Child Class A objectA = new B(); objectA.foo();</description></item></channel></rss>
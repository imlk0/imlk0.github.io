<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统 on imlk&#39;s blog</title>
    <link>https://blog.imlk.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on imlk&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 May 2019 00:00:09 +0800</lastBuildDate><atom:link href="https://blog.imlk.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自制x86玩具操作系统 week10</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week10/</link>
      <pubDate>Wed, 01 May 2019 00:00:09 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week10/</guid>
      <description>DAY 0x1B 回顾TSS结构体，其中有一CR3字段，该字段在task切换的时候会自动赋值给CR3寄存器，我们可以在这里给用户程序设置额外的页目录地址（</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week9</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week9/</link>
      <pubDate>Wed, 01 May 2019 00:00:08 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week9/</guid>
      <description>DAY 0x18 分页前的准备 Linux并没有非常依赖于段表，而是采用的分页结构，将内核和用户程序的段设置为覆盖整个内存区域以此来绕过分段结构，但是显然这</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week8</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week8/</link>
      <pubDate>Wed, 01 May 2019 00:00:07 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week8/</guid>
      <description>DAY 0x17 关于链接器obj2bim 翻看源码发现，obj2bim其实就是个链接器，依据一个.rul规则文件来生成链接后的二进制文件。 输入文件 它接受的</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week7</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week7/</link>
      <pubDate>Wed, 01 May 2019 00:00:06 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week7/</guid>
      <description>DAY 0x12 让新进程执行对象的成员函数 今天回看之前的内容，发现命令行窗口那一块比较乱，于是乎建了一个Console类，把和控制台有关的比如图层、Fi</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week6</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week6/</link>
      <pubDate>Wed, 01 May 2019 00:00:05 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week6/</guid>
      <description>DAY 0x0F 两种JMP指令 near jmp只修改IP寄存器的值，而far jmp同时修改IP寄存器和CS寄存器的值(用:隔开) 用于任务切换的JMP命令就属于f</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week5</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week5/</link>
      <pubDate>Wed, 01 May 2019 00:00:04 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week5/</guid>
      <description>DAY 0x0C PIT (Programmable Interval Timer 可编程的间隔型定时器) 查阅资料知道AT兼容机中PIT时钟频率为1.19318MHz 中断周期设定的值的单位是一个时钟周期，因此要达</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week4</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week4/</link>
      <pubDate>Wed, 01 May 2019 00:00:03 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week4/</guid>
      <description>DAY 0x09 内存检查 内存检查前需要先禁用缓存，通过修改CR0寄存器实现这一点 内存检查是通过对内存单元进行写、反转、判断、反转、判断，来确定一个内存单</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week3</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week3/</link>
      <pubDate>Wed, 01 May 2019 00:00:02 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week3/</guid>
      <description>DAY 0x06 Makefile make中可以使用一般规则（通配规则,依赖中:%.cpp,执行语句中:$*.cpp），但是普通规则比一般规则的优先级更高 汇编 GDTR寄</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week2</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week2/</link>
      <pubDate>Wed, 01 May 2019 00:00:01 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week2/</guid>
      <description>DAY 0x03 Makefile 命令块中-del + 文件表示让make中删除该文件 汇编 INT 0x13中断表示操作磁盘 参数 取值和含义 AH 0x00复位磁盘,0x02读盘,0x3写</description>
    </item>
    
    <item>
      <title>自制x86玩具操作系统 week1</title>
      <link>https://blog.imlk.top/posts/x86-toyos-dev-week1/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.imlk.top/posts/x86-toyos-dev-week1/</guid>
      <description>DAY 0x00 先装个翻译插件，装了半天找了个勉强能用的 然后考虑用git来做版本控制，方便和原版进行比较找出自己的修改，然后发现文字编码问题，于是乎捣鼓</description>
    </item>
    
  </channel>
</rss>
